这是一个相对完整的程序。首先，我们在 MainWindow 类中添加了一个私有函数 open() 和一个私有变量 openAction。在 MainWindow 的构造函数中，第一行我们调用了 setWindowTitle()，设置主窗口的标题。注意我们的文本使用 tr() 函数，这是一个用于 Qt 国际化的函数。在后续章节中我们可以看到，我们可以使用 Qt 提供的国际化工具，将 tr() 函数的字符串提取出来，进行国际化。由于所需进行国际化的文本应该被大多数人认识，所以，tr() 函数里面一般会是英文文本。
QAction 第二个参数中，文本值前面有一个 &，意味着这将成为一个快捷键。注意看截图中 File 的 F 有一个下划线。

下面一句，我们使用了 setShortcut() 函数，用于说明这个 QAction 的快捷键。Qt 的 QKeySequence 为我们定义了很多内置的快捷键，比如我们使用的 Open。你可以通过查阅 API 文档获得所有的快捷键列表。 这个与我们自己定义的有什么区别呢？简单来说，我们完全可以自己定义一个 tr(“Ctrl+O”) 来实现快捷键。原因在于，这是 Qt 跨平台性的体现。比如 PC 键盘和 Mac 键盘是不一样的，一些键在 PC 键盘上有，而 Mac 键盘上可能并不存在，或者反之。使用 QKeySequence 类来添加快捷键，会根据平台的不同来定义相应的快捷键。

setStatusTip() 则实现了当用户鼠标滑过这个 action 时，会在主窗口下方的状态栏显示相应的提示。

后面的 connect() 函数，将这个 QAction 的 triggered() 信号与 MainWindow 类的 open() 函数连接起来。当用户点击了这个 QAction 时，会自动触发 MainWindow 的 open() 函数。这是我们之前已经了解过的。

下面的 menuBar()、toolBar() 和 statusBar() 三个是 QMainWindow 的函数，用于创建并返回菜单栏、工具栏和状态栏。我们可以从代码清楚地看出，我们向菜单栏添加了一个 File 菜单，并且把这个 QAction 对象添加到这个菜单；同时新增加了一个 File 工具栏，也把 QAction 对象添加到了这个工具栏。我们可以看到，在菜单中，这个对象被显示成一个菜单项，在工具栏变成了一个按钮。至于状态栏，则是出现在窗口最下方，用于显示动作对象的提示信息的。
