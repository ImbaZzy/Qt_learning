下面我们来分析下自定义信号槽的代码。

这段代码放在了三个文件，分别是 newspaper.h，reader.h 和 main.cpp。为了减少文件数量，可以把 newspaper.h 和 reader.h 都放在 main.cpp 的 main() 函数之前吗？答案是，可以，但是需要有额外的操作。具体问题，我们在下面会详细说明。

首先看 Newspaper 这个类。这个类继承了 QObject 类。只有继承了 QObject 类的类，才具有信号槽的能力。所以，为了使用信号槽，必须继承 QObject。凡是 QObject 类（不管是直接子类还是间接子类），都应该在第一行代码写上 Q_OBJECT。不管是不是使用信号槽，都应该添加这个宏。这个宏的展开将为我们的类提供信号槽机制、国际化机制以及 Qt 提供的不基于 C++ RTTI 的反射能力。因此，如果你觉得你的类不需要使用信号槽，就不添加这个宏，就是错误的。其它很多操作都会依赖于这个宏。注意，这个宏将由 moc（我们会在后面章节中介绍 moc。这里你可以将其理解为一种预处理器，是比 C++ 预处理器更早执行的预处理器。） 做特殊处理，不仅仅是宏展开这么简单。moc 会读取标记了 Q_OBJECT 的头文件，生成以 moc_ 为前缀的文件，比如 newspaper.h 将生成 moc_newspaper.cpp。你可以到构建目录查看这个文件，看看到底增加了什么内容。注意，由于 moc 只处理头文件中的标记了 Q_OBJECT 的类声明，不会处理 cpp 文件中的类似声明。因此，如果我们的 Newspaper 和 Reader 类位于 main.cpp 中，是无法得到 moc 的处理的。解决方法是，我们手动调用 moc 工具处理 main.cpp，并且将 main.cpp 中的 include “newspaper.h” 改为 include “moc_newspaper.h” 就可以了。不过，这是相当繁琐的步骤，为了避免这样修改，我们还是将其放在头文件中。许多初学者会遇到莫名其妙的错误，一加上 Q_OBJECT 就出错，很大一部分是因为没有注意到这个宏应该放在头文件中。
